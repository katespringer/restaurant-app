{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\keskt\\\\restaurant-app\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    restaurants {\\n      data {\\n        id\\n        attributes {\\n          name\\n          description\\n          image {\\n            data {\\n              attributes {\\n                url\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _data$restaurants,\n      _data$restaurants$dat,\n      _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 20\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n\n  if ((_data$restaurants = data.restaurants) === null || _data$restaurants === void 0 ? void 0 : (_data$restaurants$dat = _data$restaurants.data) === null || _data$restaurants$dat === void 0 ? void 0 : _data$restaurants$dat.length) {\n    var searchQuery = data.restaurants.data.filter(function (query) {\n      return query.attributes.name.toLowerCase().includes(props.search);\n    });\n    var restId = searchQuery[0].id; // definet renderer for Dishes\n\n    var renderDishes = function renderDishes(restaurantID) {\n      return __jsx(Dishes, {\n        restId: restaurantID,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, \" \");\n    };\n\n    if (searchQuery.length > 0) {\n      var restList = searchQuery.map(function (_ref) {\n        var id = _ref.id,\n            attributes = _ref.attributes;\n        return __jsx(Col, {\n          xs: \"6\",\n          sm: \"4\",\n          key: id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 5\n          }\n        }, __jsx(Card, {\n          style: {\n            margin: \"0 0.5rem 20px 0.5rem\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 7\n          }\n        }, __jsx(CardImg, {\n          top: true,\n          style: {\n            height: 200\n          },\n          src: \"http://localhost:1337\".concat(attributes.image.data.attributes.url),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 9\n          }\n        }), __jsx(CardBody, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }\n        }, __jsx(CardText, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }, attributes.description)), __jsx(\"div\", {\n          className: \"card-footer\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }, __jsx(Button, {\n          color: \"info\",\n          onClick: function onClick() {\n            return setRestaurantID(id);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 9\n          }\n        }, attributes.name))));\n      });\n      return __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 5\n        }\n      }, __jsx(Row, {\n        xs: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }\n      }, restList), __jsx(Row, {\n        xs: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 5\n        }\n      }, renderDishes(restaurantID)));\n    } else {\n      return __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 10\n        }\n      }, \" No Restaurants Found\");\n    }\n  }\n}\n\n_s(RestaurantList, \"l1Ak/LzRian4lZrHyfOjQOP3flU=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/keskt/restaurant-app/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","length","searchQuery","filter","query","attributes","name","toLowerCase","includes","search","restId","id","renderDishes","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import {gql,useQuery} from '@apollo/client';\r\nimport Dishes from \"./dishes\"\r\nimport {useContext, useState} from 'react';\r\n\r\n\r\nimport AppContext from \"./context\"\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardText,\r\n  CardTitle,\r\n  Container,\r\n  Row,\r\n  Col} from \"reactstrap\";\r\n\r\nfunction RestaurantList(props){\r\n  const[restaurantID, setRestaurantID] = useState(0)\r\n  const {cart } = useContext(AppContext);\r\n  const [state, setState] = useState(cart)\r\n  const GET_RESTAURANTS = gql`\r\n  {\r\n    restaurants {\r\n      data {\r\n        id\r\n        attributes {\r\n          name\r\n          description\r\n          image {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n const { loading, error, data } = useQuery(GET_RESTAURANTS)\r\n if (loading) return <p>Loading...</p>;\r\n if (error) return <p>ERROR</p>;\r\n if (!data) return <p>Not found</p>;\r\n console.log(`Query Data: ${data.restaurants}`)\r\n\r\n\r\nif (data.restaurants?.data?.length) {\r\n    const searchQuery = data.restaurants.data.filter((query) =>\r\n      query.attributes.name.toLowerCase().includes(props.search)\r\n    );\r\nlet restId = searchQuery[0].id\r\n\r\n// definet renderer for Dishes\r\n  const renderDishes = (restaurantID) => {\r\n    return (<Dishes restId={restaurantID}> </Dishes>)\r\n  };\r\nif(searchQuery.length > 0){\r\n  const restList = searchQuery.map(({ id, attributes }) => (\r\n    <Col xs=\"6\" sm=\"4\" key={id}>\r\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\r\n        <CardImg\r\n          top={true}\r\n          style={{ height: 200 }}\r\n           src={`http://localhost:1337${attributes.image.data.attributes.url}`}\r\n        />\r\n        <CardBody>\r\n          <CardText>{attributes.description}</CardText>\r\n        </CardBody>\r\n        <div className=\"card-footer\">\r\n\r\n        <Button color=\"info\" onClick={()=> setRestaurantID(id)}>{attributes.name}</Button>\r\n            </div>\r\n      </Card>\r\n    </Col>\r\n  ))\r\n\r\n  return(\r\n\r\n    <Container>\r\n    <Row xs='3'>\r\n      {restList}\r\n    </Row>\r\n\r\n    <Row xs='3'>\r\n    {renderDishes(restaurantID)}\r\n    </Row>\r\n\r\n    </Container>\r\n\r\n  )\r\n} else {\r\n  return <h1> No Restaurants Found</h1>\r\n}\r\n}\r\n}\r\nexport default RestaurantList;\r\n"]},"metadata":{},"sourceType":"module"}