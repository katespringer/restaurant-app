{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keskt\\\\restaurant-app\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  var _data$restaurants, _data$restaurants$dat;\n\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n  {\n    restaurants {\n      data {\n        id\n        attributes {\n          name\n          description\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 20\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n\n  if ((_data$restaurants = data.restaurants) === null || _data$restaurants === void 0 ? void 0 : (_data$restaurants$dat = _data$restaurants.data) === null || _data$restaurants$dat === void 0 ? void 0 : _data$restaurants$dat.length) {\n    const searchQuery = data.restaurants.data.filter(query => query.attributes.name.toLowerCase().includes(props.search));\n    let restId = searchQuery[0].id; // definet renderer for Dishes\n\n    const renderDishes = restaurantID => {\n      return __jsx(Dishes, {\n        restId: restaurantID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, \" \");\n    };\n\n    if (searchQuery.length > 0) {\n      const restList = searchQuery.map(({\n        id,\n        attributes\n      }) => __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 5\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: `http://localhost:1337${attributes.image.data.attributes.url}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }), __jsx(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, __jsx(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, attributes.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: () => setRestaurantID(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, attributes.name)))));\n      return __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 5\n        }\n      }, __jsx(Row, {\n        xs: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }\n      }, restList), __jsx(Row, {\n        xs: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 5\n        }\n      }, renderDishes(restaurantID)));\n    } else {\n      return __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 10\n        }\n      }, \" No Restaurants Found\");\n    }\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/keskt/restaurant-app/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","length","searchQuery","filter","query","attributes","name","toLowerCase","includes","search","restId","id","renderDishes","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import {gql,useQuery} from '@apollo/client';\r\nimport Dishes from \"./dishes\"\r\nimport {useContext, useState} from 'react';\r\n\r\n\r\nimport AppContext from \"./context\"\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardText,\r\n  CardTitle,\r\n  Container,\r\n  Row,\r\n  Col} from \"reactstrap\";\r\n\r\nfunction RestaurantList(props){\r\n  const[restaurantID, setRestaurantID] = useState(0)\r\n  const {cart } = useContext(AppContext);\r\n  const [state, setState] = useState(cart)\r\n  const GET_RESTAURANTS = gql`\r\n  {\r\n    restaurants {\r\n      data {\r\n        id\r\n        attributes {\r\n          name\r\n          description\r\n          image {\r\n            data {\r\n              attributes {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n const { loading, error, data } = useQuery(GET_RESTAURANTS)\r\n if (loading) return <p>Loading...</p>;\r\n if (error) return <p>ERROR</p>;\r\n if (!data) return <p>Not found</p>;\r\n console.log(`Query Data: ${data.restaurants}`)\r\n\r\n\r\nif (data.restaurants?.data?.length) {\r\n    const searchQuery = data.restaurants.data.filter((query) =>\r\n      query.attributes.name.toLowerCase().includes(props.search)\r\n    );\r\nlet restId = searchQuery[0].id\r\n\r\n// definet renderer for Dishes\r\n  const renderDishes = (restaurantID) => {\r\n    return (<Dishes restId={restaurantID}> </Dishes>)\r\n  };\r\nif(searchQuery.length > 0){\r\n  const restList = searchQuery.map(({ id, attributes }) => (\r\n    <Col xs=\"6\" sm=\"4\" key={id}>\r\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\r\n        <CardImg\r\n          top={true}\r\n          style={{ height: 200 }}\r\n           src={`http://localhost:1337${attributes.image.data.attributes.url}`}\r\n        />\r\n        <CardBody>\r\n          <CardText>{attributes.description}</CardText>\r\n        </CardBody>\r\n        <div className=\"card-footer\">\r\n\r\n        <Button color=\"info\" onClick={()=> setRestaurantID(id)}>{attributes.name}</Button>\r\n            </div>\r\n      </Card>\r\n    </Col>\r\n  ))\r\n\r\n  return(\r\n\r\n    <Container>\r\n    <Row xs='3'>\r\n      {restList}\r\n    </Row>\r\n\r\n    <Row xs='3'>\r\n    {renderDishes(restaurantID)}\r\n    </Row>\r\n\r\n    </Container>\r\n\r\n  )\r\n} else {\r\n  return <h1> No Restaurants Found</h1>\r\n}\r\n}\r\n}\r\nexport default RestaurantList;\r\n"]},"metadata":{},"sourceType":"module"}